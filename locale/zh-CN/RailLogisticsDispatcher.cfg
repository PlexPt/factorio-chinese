[controls]
viirld-pause-key=暂停/继续调度器

[entity-description]
viirld-dispatcher=附近的站点在铁路物流中被激活。\n将信号与站点的内容连接到输入端口。\n当列车停止时，包含交付信息的信号会发送到输出端口。

[entity-name]
viirld-dispatcher=铁路物流调度器
viirld-io=调度器的隐藏端口

[mod-description]
viirld=添加一个调度器（建筑物）来基于供应和请求站点自动化铁路物流。\n\n具有直观界面。受到LTN的启发，但采用了不同的方式。

[mod-name]
viirld=铁路物流调度器2 (Rail Logistics Dispatcher)

[mod-setting-description]
viirld-correctScheduleAtProvider=当列车到达供应站时，交付可以根据列车前往途中供应和请求的变化进行调整。
viirld-countingInsertersContent=计算站点内容时，会考虑到信号和列车的内容。\n这有时会导致加载或卸载期间内容跳动，因为部分货物会暂时停留在机械臂中。\n此选项可启用机械臂内容计算。
viirld-debug=启用一些调试消息和指示器。
viirld-minEnergyUseTrainMJ=列车参与交付的最低充电能量。\n能量储备低于指定值的列车将不会被用于交付，将停留在车库中。\n单位为兆焦耳（MJ）。\n\n例如：100 MJ = 25 煤炭。
viirld-pauseNewDispatchers=如果新安装的调度器有设置（从其影子复制或重新创建），则暂停。\n\n这可以防止向新复制的调度器创建交付。
viirld-set-train-group=当列车到达车库时，会被分配到与车库站点同名的组。\n\n在交付过程中，列车会离开组并在回到车库时重新加入。
viirld-updateTicks=更新站点内容、设置、请求和供应的周期。\n\n较低的值表示更频繁的更新，但对CPU负载较高。\n\n请注意，每个站点的更新频率最多每60个游戏刻。
viirld-use-hack-to-save-interrupts=Lua API不支持保存或更改列车中断——它们会在调度表更改时被删除。\n\n在异星工厂添加此功能之前，可以使用一种变通方法（技巧）。\n\n某些MOD可能会干扰此技巧，因此可能不可靠。

[mod-setting-name]
viirld-correctScheduleAtProvider=调整交付
viirld-countingInsertersContent=考虑机械臂内容
viirld-debug=调试
viirld-minEnergyUseTrainMJ=列车最低能量（MJ）
viirld-pauseNewDispatchers=暂停新调度器
viirld-set-train-group=车库中设置列车组
viirld-updateTicks=更新间隔（刻）
viirld-use-hack-to-save-interrupts=保存中断（技巧）

[technology-description]
viirld-dispatcher=通过将供应站、请求站和列车结合为一个自动化网络来实现铁路物流自动化。

[technology-name]
viirld-dispatcher=铁路物流调度器

[viirld-gui]
ANY_FLUID_BY_SIGNALS=通过信号指定液体：
ANY_ITEM_BY_SIGNALS=通过信号指定货物：
EL_ALLOW_ANY_FLUID_PROVIDE=[item=passive-provider-chest] 供应
EL_ALLOW_ANY_FLUID_PROVIDE-tt=车站将根据调度器输入端口的信号供应液体。\n信号必须大于零（>0）。\n\n输入端口必须连接到车站的储液罐。
EL_ALLOW_ANY_FLUID_REQUEST=[item=requester-chest] 请求
EL_ALLOW_ANY_FLUID_REQUEST-tt=车站将根据调度器输入端口的信号请求液体。\n信号必须小于零（<0）才能请求。\n\n输入端口必须连接到车站的储液罐。\n\n设置的最小值（适用于所有液体）将允许每次配送至少携带指定数量。
EL_ALLOW_ANY_ITEM_PROVIDE=[item=passive-provider-chest] 供应
EL_ALLOW_ANY_ITEM_PROVIDE-tt=车站将根据调度器输入端口的信号供应货物。\n信号必须大于零（>0）。\n\n输入端口必须连接到车站的货箱。
EL_ALLOW_ANY_ITEM_REQUEST=[item=requester-chest] 请求
EL_ALLOW_ANY_ITEM_REQUEST-tt=车站将根据调度器输入端口的信号请求货物。\n信号必须小于零（<0）才能请求。\n\n输入端口必须连接到车站的货箱。\n\n设置的最小值（适用于所有货物）将允许每次配送至少携带指定数量。
EL_APPLY=应用
EL_CARGO_STAT_TABLE-H-COUNT=配送次数
EL_CARGO_STAT_TABLE-H-LASTTIME=最后时间
EL_CARGO_STAT_TABLE-H-RECV=接收
EL_CARGO_STAT_TABLE-H-SENT=发送
EL_CARGO_STAT_TABLE-TITLE=统计信息
EL_DELETE_DELIVERY-tt=删除配送。\n\n让调度器忘记这次配送，不会影响列车——列车仍会按计划行驶。
EL_DELIVERIES_TABLE-H-FROM=来源
EL_DELIVERIES_TABLE-H-TIME=时间
EL_DELIVERIES_TABLE-H-TO=目标
EL_DELIVERIES_TABLE-TITLE=配送列表
EL_ERR_TABLE-H-ERROR=错误
EL_ERR_TABLE-H-TIME=时间
EL_IO_TABLE-H-BALANCE=余额
EL_IO_TABLE-H-ON_STATION=在车站
EL_IO_TABLE-H-ON_WAY=运输中
EL_IO_TABLE-TITLE=[color=__1__]请求−[/color] 和 [color=__2__]供应+[/color]
EL_ITEM_ALLOW_PROVIDE=[item=passive-provider-chest] 供应
EL_ITEM_ALLOW_PROVIDE-tt=车站将供应所选资源。\n\n供应量由调度器输入端口接收到的信号决定。\n必须连接到车站的货箱和/或储液罐。
EL_ITEM_ALLOW_REQUEST=[item=requester-chest] 请求：
EL_ITEM_ALLOW_REQUEST-tt=车站将请求所选资源。\n\n请求量由指定的参数和调度器输入端口的信号决定。\n必须连接到车站的货箱和/或储液罐。\n\n设置的最小值将确保每次配送至少携带指定数量。
EL_ITEM_BUTTON-ANY-tt=根据调度器输入端口接收的信号进行设置的按钮。\n\n如果收到负数信号（< 0）的货物或液体，车站将请求该资源。\n如果是正数信号（> 0），车站将供应。\n需要相应设置启用。
EL_ITEM_BUTTON-tt=选择一个物品或液体，然后设置请求或供应参数。\n\n根据设置，车站将在铁路网络中请求或供应所选资源。
EL_ITEM_MEM_BUTTON=记忆：
EL_ITEM_MEM_BUTTON-tt=按住 Ctrl、Alt 或 Shift 左键点击可将物品设置保存到单元格。\n仅左键点击可应用保存的设置。\n右键点击清除单元格。
EL_ITEM_MIN=最小值：
EL_ITEM_MIN-tt=车站将请求所选资源。\n\n请求量由指定参数和调度器输入端口的信号决定。\n必须连接到车站的货箱和/或储液罐。\n\n设置的最小值将确保每次配送至少携带指定数量。
EL_ITEM_REQUEST-tt=车站将请求选定的资源。\n\n请求量由指定的参数以及调度器输入端口上的信号决定。\n它必须连接到车站的箱子和/或储液罐。\n\n设置最低值可以确保每次交付不少于指定的数量。
EL_LEN=车厢数量:
EL_LEN-tt=车站的列车长度限制："从"–"到"（包括在内）。\n\n例如，如果指定"2"–"3"，那么从该车站出发的列车仅有两节或三节车厢（包括机车）。\n你可以省略一些值：" "–"3"表示一节、两节或三节车厢。
EL_MIN_ANY_FLUID=最小值:
EL_MIN_ANY_FLUID-tt=车站将根据调度器输入端口上的信号请求液体。\n必须为负值（<0）才能发出请求。\n\n输入端口必须连接到车站的储液罐。\n\n最低值设置（适用于所有液体）将允许你每次交付至少携带指定的数量。
EL_MIN_ANY_ITEM=最小值:
EL_MIN_ANY_ITEM-tt=车站将根据调度器输入端口上的信号请求货物。\n必须为负值（<0）才能发出请求。\n\n输入端口必须连接到车站的箱子。\n\n最低值设置（适用于所有货物）将允许你每次交付至少携带指定的数量。
EL_MODE_DEPOT=[item=locomotive] 车库
EL_MODE_DEPOT-tt=在车库中，列车等待交付任务并进行加油。\n\n列车总是返回它离开的同名车库，通过车站名称找到。\n\n如果希望为不同类型的列车设置不同的车库，请给它们命名不同。\n\n如果列车燃料不足或车厢中仍有货物，它将停留并等待加油和清空。
EL_MODE_ENDPOINT=[item=passive-provider-chest] 提供 / [item=requester-chest] 请求
EL_MODE_ENDPOINT-tt=根据设置和物资信号，车站将参与交付任务。\n\n对于每种类型的货物（固体或液体），可以启用“请求”或“提供”模式。\n\n也可以设置通用模式 [virtual-signal=signal-anything] ——请求（<0）和提供（>0）由调度器输入端口上的信号决定。\n\n当网络中出现两个相似的请求和提供车站时，如果有合适的列车可用，就会创建交付。
EL_MODE_LIQUIDATION=[item=active-provider-chest] 清算
EL_MODE_LIQUIDATION-tt=类似于“[item=passive-provider-chest] 提供 / [item=requester-chest] 请求”模式，但有以下变化：\n- 此站点的请求被禁用；\n- 提供的优先级最高；\n- 当其他站点从此站点请求货物时，忽略最低值。\n\n用于卸载准备销毁的货物。
EL_MODE_OFF=关闭
EL_MODE_OFF-tt=调度器将不控制此站点。
EL_NETWORK=网络:
EL_NETWORK-tt=你可以为该车站指定网络，例如：1，2，...\n\n每个网络是独立的：交付在一个网络内组织。然而，列车是共享的。
EL_OUT_MODE_EXCHANGE=输出需求交换
EL_OUT_MODE_EXCHANGE-tt=输出端口将显示需要装载（>0）或卸载（<0）的货物以发送列车。\n\n例如，提供站点将显示装载的货物为正号。请求站点将显示为负号。\n\n请注意，选项“反转输出”可以改变符号：装载—<0，卸载—>0。\n\n输出端口还会发送以下信号：\n[virtual-signal=signal-P] ——当有列车时，如果是提供站点，代表“提供者”。\n[virtual-signal=signal-R] ——当有列车时，如果是请求站点，代表“请求者”。\n[virtual-signal=signal-E] ——当有任何错误时。\n[virtual-signal=signal-L] ——列车长度，包括机车。\n[virtual-signal=signal-C] ——货车数量。\n[virtual-signal=signal-F] ——液罐车数量。
EL_OUT_MODE_NEGATE=反转输出
EL_OUT_MODE_NEGATE-tt=改变输出端口的符号。\n\n对于“输出需求内容”模式，发送所需列车内容时会带有负号。\n对于“输出需求交换”模式，符号将改变：装载—<0，卸载—>0。
EL_OUT_MODE_TARGET_CONTENTS=输出需求内容
EL_OUT_MODE_TARGET_CONTENTS-tt=输出端口将显示发送列车所需的内容。\n\n例如，提供站点将显示正在装载的货物。请求站点将显示为空——列车中不应剩下任何东西。\n\n输出端口还会发送以下信号：\n[virtual-signal=signal-P] ——当有列车时，如果是提供站点，代表“提供者”。\n[virtual-signal=signal-R] ——当有列车时，如果是请求站点，代表“请求者”。\n[virtual-signal=signal-E] ——当有任何错误时。\n[virtual-signal=signal-L] ——列车长度，包括机车。\n[virtual-signal=signal-C] ——货车数量。\n[virtual-signal=signal-F] ——液罐车数量。
EL_PAUSE=暂停
EL_PAUSE-paused=[virtual-signal=viirld-delivery-pause] 取消暂停
EL_PAUSE-tt=它将在此站点暂停交付任务的创建。\n\n在设置中可以启用或禁用新调度器的自动暂停。\n\n可以使用信号[virtual-signal=viirld-delivery-pause]进行自动暂停。\n\n如果信号设置了暂停，你不能通过按钮取消暂停。
EL_ROLLBACK=回退
EL_STATION_TEMPLATE=站点名称模板:
EL_STATION_TEMPLATE-tt=自动车站重命名的模板。\n\n对于模式“[item=passive-provider-chest] 提供 / [item=requester-chest] 请求”或“[item=active-provider-chest] 清算”，字段可以使用以下替换符：\n- %d – 表示一个数字，将被替换为任意数字以使站点名称变得唯一；\n- %s – 表示任意字符串，将被替换为“blabla%d”，以使站点名称变得唯一；\n- %x – 将被替换为站点的x坐标；\n- %y – 将被替换为站点的y坐标；\n- %u – 将被替换为唯一的站点标识符。\n\n对于“[item=locomotive] 车库”不使用替换符。\n\n请注意，如果站点名称已经与模板匹配，则不会进行重命名，例如，\n如果站点已经被称为“[item=iron-plate] Zheleznogorsk”（并且没有其他具有此名称的站点），那么使用模板“[item=iron-plate] %s”时，不会重命名为“[item=iron-plate] blabla1”。\n\n示例：\n- 模板“[item=iron-plate] %d” → “[item=iron-plate] 1”或“[item=iron-plate] 2”，...\n- 模板“[item=iron-plate] %s” → “[item=iron-plate] blabla1”或“[item=iron-plate] blabla2”，...\n- 模板“[item=iron-plate] %xx%y” → “[item=iron-plate] 45x76”\n- 模板“[item=iron-plate]” → “[item=iron-plate]1” - 没有%d或%s，因此数字添加到右侧。\n\n如果为空，调度器不会更新站点名称。
EL_STAT_TRAINS=曾到过列车: __1__
FLAG_turnInserters=翻转传送臂
FLAG_turnInserters-tt=有时，在发送列车时，传送臂中可能会残留物品。此选项将在发送列车时临时翻转传送臂以将物品放回箱子中。
FLAG_useEquals=严格比较
FLAG_useEquals-tt=默认情况下，日程使用非严格比较（>=）。此选项启用严格比较（=）。这对于更精确的装载可能有用。
FLAG_useSignals=信号模式
FLAG_useSignals-tt=根据信号（[virtual-signal=signal-green]）为该站点生成一个日程。不要忘记连接车站。
FLY-SELECT_ITEM_OR_FLUID=选择物品或液体。
WINDOW_TITLE=__1__车站调度器
WINDOW_TITLE-ghost=车站调度器的幽灵
mem-any-item-fluid=基于信号的液体：
mem-any-item-item=基于信号的货物：
mem-any-item-nothing=禁用提供和请求
mem-any-item-provide=[item=passive-provider-chest] 启用提供
mem-any-item-request=[item=requester-chest] 启用请求，最低值 __1__
mem-item-nothing=禁用提供和请求
mem-item-provide=[item=passive-provider-chest] 启用提供
mem-item-request=[item=requester-chest] 启用请求：__1__，最低值 __2__
mem-item-tt=按住Ctrl、Alt或Shift点击左键，将物品设置保存到单元格。\n仅左键点击以应用已保存的设置。\n右键点击清除单元格。



[viirld-units]
x-cargo-wagon=×[entity=__1__]
x-cargo-wagon-str=__1__节
x-cargo-wagon-tt=货车 = __1__×[img=viirld_stack]
x-fluid-wagon=×[entity=__1__]
x-fluid-wagon-str=__1__节
x-fluid-wagon-tt=液罐车 = __1__
x-reverse-count-line== __1__ __2__
x-stack=×[img=viirld_stack]
x-stack-str=__1__s
x-stack-tt=堆叠数
x1=×1
x1-tt=确切数量

[viirld]
ERR--DIRTY=列车未清空
ERR--DIRTY-tt=列车中仍有货物或液体。\n列车在清空前不会用于配送任务。
ERR--NO_CONNECTION=未连接 [item=green-wire][item=red-wire]
ERR--NO_CONNECTION-tt=调度器输入端口未连接到站台的箱子或储液罐 ([item=green-wire][item=red-wire])。\n未连接之前，调度器不会创建配送任务。
ERR--NO_FUEL=列车未加油
ERR--NO_FUEL-tt=列车燃料不足 (< __1__ MJ，设置于地图参数中)。\n列车在补充燃料之前不会用于配送任务。
ERR-DELETED_DELIVERY=已移除配送任务 __1__，列车可能被卡住：[train-stop=__2__] → [train-stop=__3__]
ERR-NEED_CHECK=需要检查
ERR-NEED_CHECK-tt=站台此前在处理 [__1__] 请求时出现问题，但已创建配送任务。\n\n需要检查 [__1__] 请求的问题是否完全解决。这需要一些时间。
ERR-NO_PROVIDE=无供应
ERR-NO_PROVIDE-tt=无法找到提供 [__1__] 的站台。
ERR-NO_REQUEST=无请求
ERR-NO_TRAIN=无列车
ERR-NO_TRAIN-tt=找不到可用于配送 [__1__] 的合适空闲列车。\n\n列车必须符合供应站和请求站的长度设置，同时配备满足最低请求需求的车厢。
ERR-PAUSED=已暂停
ERR-PAUSED-tt=该站台不会创建配送任务。\n    \n您可以通过上方按钮或发送信号 [virtual-signal=viirld-delivery-pause] 至调度器输入端口暂停或恢复配送。\n\n如果调度器有设置（复制或从其幽灵中重建），新建的调度器会默认暂停。这可在设置中关闭。
ERR-TNQ-LIMIT=站台限制
ERR-TNQ-LIMIT-tt=站台上的列车数量已满或超出限制（设置于站台参数中）。
ERR-TNQ-QUEUED=已排队
ERR-TNQ-QUEUED-tt=由于供应有限，请求站 [__1__] 正在排队。\n\n队列确保有限供应的更公平分配。\n\n当前队列：__2__
ERR-WRONG_SETTINGS=调度器设置错误：__1__
ERR_MSG-TRAIN_ARRIVED_PROVIDER_TWICE=列车已多次到达供应站：[train-stop=__1__]
ERR_MSG-TRAIN_ARRIVED_REQUESTER_TWICE=列车已多次到达请求站：[train-stop=__1__]
ERR_MSG-TRAIN_ARRIVED_REQUESTER_WO_PROVIDER=列车到达请求站 [train-stop=__1__]，但未到达供应站。
ERR_MSG-UNEXPECTED_DEPOT=意外到达车库：[train-stop=__1__]。
ERR_MSG-UNKNOWN_DELIVERY=站台 [train-stop=__2__] 上发现未知配送任务 __1__。
RQ-line=\n__1__. __2__
RQ-line_me=\n__1__. __2__ — 当前站台
RQ-no=无队列
pause-by-signal=信号 [virtual-signal=viirld-delivery-pause] 暂停
paused=已暂停
unpaused=已恢复

[virtual-signal-description]
viirld-delivery=铁路物流调度器确定到达站台的配送任务。\n此为技术信号，请勿手动更改。
viirld-delivery-pause=铁路物流调度器在输入端口接收该信号时暂停创建配送任务。

[virtual-signal-name]
viirld-delivery=配送任务 ID
viirld-delivery-pause=暂停配送任务

